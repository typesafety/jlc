{- | Haskell module generated by the BNF converter,
modified after the fact.
-}

module Javalette.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

newtype Prog = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Type Ident [Arg] Blk
  deriving (Eq, Ord, Show, Read)

data Arg = Argument Type Ident
  deriving (Eq, Ord, Show, Read)

newtype Blk = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
  = Empty
  | BStmt Blk
  | Decl Type [Item]
  | Ass Ident Expr
  | Incr Ident
  | Decr Ident
  | Ret Expr
  | VRet
  | If Expr Stmt
  | IfElse Expr Stmt Stmt
  | While Expr Stmt
  | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type = Int | Double | Bool | Void | Fun Type [Type] | Str
  deriving (Eq, Ord, Show, Read)

data Expr
  = EVar Ident
  | ELitInt Integer
  | ELitDouble Double
  | ELitTrue
  | ELitFalse
  | EApp Ident [Expr]
  | EString String
  | Neg Expr
  | Not Expr
  | EMul Expr MulOp Expr
  | EAdd Expr AddOp Expr
  | ERel Expr RelOp Expr
  | EAnd Expr Expr
  | EOr Expr Expr
  | AnnExp Expr Type
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)
