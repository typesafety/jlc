entrypoints Prog ;

-- Programs

Program.    Prog ::= [TopDef] ;

-- Function definitions

FnDef.      TopDef ::= Type Ident "(" [Arg] ")" Blk ;

separator nonempty TopDef "" ;

-- Function arguments/paramenters

Argument.   Arg ::= Type Ident;

separator   Arg "," ;

-- Blocks

Block.      Blk ::= "{" [Stmt] "}" ;

-- Statments

Empty.      Stmt ::= ";" ;
BStmt.      Stmt ::= Blk ;
Decl.       Stmt ::= Type [Item] ";" ;
Ass.        Stmt ::= Ident "=" Expr ";" ;
Incr.       Stmt ::= Ident "++" ";" ;
Decr.       Stmt ::= Ident "--" ";" ;
Ret.        Stmt ::= "return" Expr ";" ;
VRet.       Stmt ::= "return" ";" ;
If.         Stmt ::= "if" "(" Expr ")" Stmt ;
IfElse.     Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
While.      Stmt ::= "while" "(" Expr ")" Stmt ;
SExp.       Stmt ::= Expr ";" ;

separator   Stmt "" ;

-- Items (used in declaration statements)

NoInit.     Item ::= Ident ;
Init.       Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

-- Types

Int.        Type ::= "int" ;
Double.     Type ::= "double" ;
Bool.       Type ::= "boolean" ;
Void.       Type ::= "void" ;

internal    Fun. Type ::= Type "(" [Type] ")" ;
internal    Str. Type ::= "String" ;

separator   Type "," ;

-- Expressions

EVar.       Expr7 ::= Ident ;
ELitInt.    Expr7 ::= Integer ;
ELitDouble. Expr7 ::= Double;
ELitTrue.   Expr7 ::= "true" ;
ELitFalse.  Expr7 ::= "false" ;
EApp.       Expr7 ::= Ident "(" [Expr] ")" ;
EString.    Expr7 ::= String ;
Neg.        Expr6 ::= "-" Expr7 ;
Not.        Expr6 ::= "!" Expr7 ;
EMul.       Expr5 ::= Expr5 MulOp Expr6 ;
EAdd.       Expr4 ::= Expr4 AddOp Expr5 ;
ERel.       Expr3 ::= Expr3 RelOp Expr4 ;
EAnd.       Expr2 ::= Expr3 "&&" Expr2 ;
EOr.        Expr1 ::= Expr2 "||" Expr1 ;

internal    AnnExp. Expr ::= Expr1 "::" Type ;

coercions   Expr 7 ;
separator   Expr "," ;

-- Operators (used in expressions)

Plus.       AddOp ::= "+" ;
Minus.      AddOp ::= "-" ;
Times.      MulOp ::= "*" ;
Div.        MulOp ::= "/" ;
Mod.        MulOp ::= "%" ;

LTH.        RelOp ::= "<" ;
LE.         RelOp ::= "<=" ;
GTH.        RelOp ::= ">" ;
GE.         RelOp ::= ">=" ;
EQU.        RelOp ::= "==" ;
NE.         RelOp ::= "!=" ;

-- Comments

comment     "#" ;
comment     "//" ;
comment     "/*" "*/" ;
